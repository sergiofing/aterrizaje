Vision 
#!/usr/bin/env python 
import rospy 
import math 
import csv 
import cv2.cv as cv 
import numpy as np 
from sensor_msgs.msg import Image 
import cv2, cv_bridge 
from geometry_msgs.msg import Twist 
import time 
from std_msgs.msg import Empty 
global girar 

def red2(pz):#control de altura 
	 
	#pz=input() 
	n1=-1.26234401017427*pz+6.78433184773894;  f1=1/(1+math.exp(-n1)) 
	n2=-0.88674168109789*pz+7.59725027953193; f2=1/(1+math.exp(-n2)) 
	n3=0.045082660253134*pz+5.29113634521188;  f3=1/(1+math.exp(-n3)) 
	n4=0.0464029610157013*pz-10.2484279312193;  f4=1/(1+math.exp(-n4)) 
	n5=11.6453861085165*pz-11.841140294909;  f5=1/(1+math.exp(-n5)) 
	n6=-0.205110609531403*pz+11.5998562607274;  f6=1/(1+math.exp(-n6)) 
	n7=-0.458281179890037*pz+13.0028959586202;  f7=1/(1+math.exp(-n7)) 
	n8=0.411562323570251*pz-10.1333895116113; f8=1/(1+math.exp(-n8)) 
	n9=-2.17872315588011*pz+8.43537518558765; f9=1/(1+math.exp(-n9)) 
	n10=-0.159853100776672*pz-0.2488448490476; f10=1/(1+math.exp(-n10)) 
	 

	n13=3.33247411638447*f1+1.94693677108614*f2-0.499316621571779*f3+10.155252033237*f4+15.1664596050978*f5-19.4765891742213*f6-4.65404698412041*f7-8.4278298355639*f8-1.06847825054664*f9-12.8683417081578*f10-8.60346473753452 
	n14=-14.3171232867458*f1 -19.6003186715688*f2-12.3197017610073*f3-7.48865624773316*f4+9.57441687583923*f5-2.55536993466009*f6-1.6155027749873*f7-1.38831023126841*f8-15.6626077069995*f9-14.1873134805566*f10+5.76943799853325 
	n15=-4.14924116930859*f1+1.76517040112187*f2+12.6239436864853*f3+13.9325227708924*f4-16.2118297815323*f5+14.8451268672943*f6-0.650016094405146*f7-12.0285157098613*f8+14.2929540719954*f9-6.22423640295892*f10-9.54919695854187 

	 
	f13=1/(1+math.exp(-n13)) 
	f14=1/(1+math.exp(-n14)) 
	f15=1/(1+math.exp(-n15)) 
	

	c1=1 
	c2=125/400.0 
	c3=0 
	y=(c1*f13+c2*f14+c3*f15)/(f15+f13+f14) 
	 
 	return y 

def red(pz): 
	 
	#pz=input() 
	n1=-0.537835508584976*pz-2.37443469464779;  f1=1/(1+math.exp(-n1)) 
	n2=0.0514984130859375*pz-0.787888467311859; f2=1/(1+math.exp(-n2)) 
	n3=-0.954892097146001*pz-7.86196863802616;  f3=1/(1+math.exp(-n3)) 
	n4=-10.0878340564668*pz+0.318432115018368;  f4=1/(1+math.exp(-n4)) 
	n5=6.35856181383133*pz-14.8053061962128;  f5=1/(1+math.exp(-n5)) 
	n6=13.7092173099518*pz-15.7153517007828;  f6=1/(1+math.exp(-n6)) 
	n7=10.9132158756256*pz-13.9719196408987;  f7=1/(1+math.exp(-n7)) 
	n8=-12.6835992559791*pz+2.73177979048342; f8=1/(1+math.exp(-n8)) 
	n9=4.95579451322556*pz+0.155434757471085; f9=1/(1+math.exp(-n9)) 
	n10=6.78144514560699*pz-7.72176027297974; f10=1/(1+math.exp(-n10)) 
	 
 
	n13=-3.45120248384774*f1+11.3993042707443*f2+8.44352216812934*f3-3.12638319584948*f4+13.2421984648762*f5-19.3812331712752*f6-3.62584907123278*f7+7.59822160005569*f8-5.30222177505493*f9-12.1477231942117*f10+1.53362572193146 
	n14=4.85743694938719*f1 -0.72933554649353*f2+13.3923244281572*f3-11.6331559751416*f4-7.67365073785186*f5+13.4514552354813*f6-12.6777285337448*f7-9.42493660608307*f8+12.0601588487625*f9-0.920248925685883*f10-11.3943865895271 
	n15=-12.9761047847569*f1+3.76420080661774*f2+1.71002709968637*f3-1.30725531349703*f4+9.19784814585*f5-10.0245320796967*f6+19.6408951282501*f7-18.4204702976611*f8-9.52143847942352*f9+14.4740346074104*f10-16.3906413316727 

	 
	f13=1/(1+math.exp(-n13)) 
	f14=1/(1+math.exp(-n14)) 
	f15=1/(1+math.exp(-n15)) 
	#print(f13) 
	#print(f14) 
	#print(f15) 

	c1=0.01 
	c2=0.4 
	c3=1 
	y=(c1*f13+c2*f14+c3*f15)/(f15+f13+f14) 
	#print(y) 

	return y 
def escribir(x,y):  
	arc.write('%5.3f,%5.3f,\n'%(x,y)) 

def leer2():#leer el archivo creado 
    arc2 = open('vid6.csv','r') 
    columna1=[]#lista vacia 
    a=csv.reader(arc2)#separa las columnas en dos listas de stream 
    
    for valores in a: 

        columna1.append(valores[0])#agrega todos los valores de la columna 0 a esta lista 
    e=0 
    for f in columna1: 
        e=float(f) 
    return e 

def image_callback(msg): 
	objeto=leer2() 
	imagen = bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8') 
	imagen = cv2.resize(imagen,(640,480)) 
	hsv =cv2.cvtColor(imagen, cv2.COLOR_BGR2HSV)#convertir imagen hsv 
	 
	if objeto==1: 
		#girar=0.1 

		cv2.putText(imagen,"objeto 1 ",(400,400),1,1,(0,0,255),1) 
		d=0 
		w=80 
		f=382 
		pub = rospy.Publisher('/bebop/cmd_vel', Twist, queue_size = 1) 
		rojobajo = np.array([0, 150, 5],np.uint8)#rangos del color rojo 
		rojoalto = np.array([10, 255, 255],np.uint8) 
		rojobajo2 = np.array([170, 180, 5],np.uint8)#rangos del color rojo 
		rojoalto2 = np.array([179, 255, 255],np.uint8) 
		 
	   	mascara = cv2.inRange(hsv, rojobajo, rojoalto)#filtro para la imagen 
	   	mascara2 = cv2.inRange(hsv, rojobajo2, rojoalto2)#filtro para la imagen 
	   	mascara3= cv2.add(mascara,mascara2)#suma de rangos de filtro 
	   	kernel= np.ones((5,5),np.uint8)#matriz de 6x6  de unos 
	   	mascara4=cv2.morphologyEx(mascara3,cv2.MORPH_OPEN,kernel)#dilatacion de la imagen 
	   	mascara4=cv2.morphologyEx(mascara3,cv2.MORPH_CLOSE,kernel)#dilatacion de la imagen 
	   	Canny =cv2.Canny(mascara4, 1, 2)#detectar los bordes 
	   	cnts,jerar = cv2.findContours(Canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
	   
		areas=[] 
		for c in cnts: 
			areas.append(cv2.contourArea(c))    
		gz2=0 
		mx=0 
		p=0	 
		d3=0 
		i=0 
		ez=0 
		spz=280 
		vz=0 
		ex=0 
		ey=0 
		pix=260 
		piy=320 
		for areactual in areas: 
			if areactual>2000: 
				figuraactual=cnts[i] 
				epsilon= 0.01*cv2.arcLength(figuraactual,True) 
				approx =  cv2.approxPolyDP(figuraactual,epsilon,True) 
				lados=len(approx) 
				cv2.putText(imagen,str(lados),(400,70),1,1,(0,255,0),1) 

				if 4<=lados <= 20: 
					girar=0 
					contorno2=cv2.convexHull(figuraactual) 
					centroide=cv2.moments(contorno2) 
					x=int(centroide["m01"]/centroide["m00"]) 
					y=int(centroide["m10"]/centroide["m00"]) 
					cv2.drawContours(imagen, [contorno2], 0, (0,255,0), 2)#[c]representa todo el vector del controno 
					longitudes=cv2.minAreaRect (figuraactual) 
					box = cv.BoxPoints(longitudes) 
					box = np.int0(box) 
					cv2.drawContours(imagen, [box], 0, (0,0,255), 1) 
					cv2.putText(imagen,'*',(y,x),1,1,(0,255,0),5) 
					d1=round(longitudes[0][0],2) 
					d2=round(longitudes[0][1],2) 
					d3=round(longitudes[1][0],2)#ancho del culagrado 
					d4=round(longitudes[1][1],2)#largo del cuadrao 
					 
					ez=spz-d3 
					ex=pix-x 
					ey=piy-y 
					if ey>=0: 
						gz2=0.9*red(ey/100.0) 
					else: 
						gz2=red(-ey/100.0) 
						gz2=-0.9*gz2 

					if -50<=ey<=50 : 
						gz2=0 
						if ex>=0: 
							mx=0.4*red(ex/100.0) 
						else: 
							mx=0 

						if -40<=ex<=40: 
							mx=0 
							if ez>=0: 
								vz=-0.3*red2(ez*1.0) 
							else: 
								vz=0 
							if -60<=ez<=60: 
								vz=0 
								arc3 = open('vid6.csv','w') 
								arc3.write('%5.3f,'%(2)) 
								arc3.close() 
					 


					cv2.putText(imagen,"error en ejez = "+str(ey),(100,100),1,1,(0,255,255),1) 
					cv2.putText(imagen,"vel de giro en z = "+str(gz2),(100,140),1,1,(0,255,255),1)	 
					cv2.putText(imagen,"error en x = "+str(ex),(100,180),1,1,(0,255,255),1) 
					cv2.putText(imagen,"vel en x = "+str(mx),(100,230),1,1,(0,255,255),1)		 
					cv2.putText(imagen,"error en z = "+str(ez),(100,250),1,1,(0,255,255),1) 
					cv2.putText(imagen,"vel en z= "+str(vz),(100,280),1,1,(0,255,255),1)						 
					cv2.putText(imagen,'*',(y,x),1,1,(0,255,0),5) 
										 
					 
			i=1+i 

		if d3>0: 
			 
			d = (w*f)/d3# determinar distancia 
			cv2.putText(imagen,'*',(320,240),1,1,(0,0,255),4)	 
					 
			if 5<d<150: 
				mensaje="distancia = "+str(round(d,2))+"cm  "+" ancho de objeto " + str(d3) 
				cv2.putText(imagen,mensaje,(20,20),1,1,(0,255,0),1) 

		cv2.imshow('video',Canny) 
		twist = Twist() 
		twist.linear.x = mx; twist.linear.y = 0; twist.linear.z = vz; 
		twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = gz2 
		pub.publish(twist) 
		 
		#print("estoyen ciclo") 

#objeto 2 

	elif objeto==2: 
		t=rospy.get_time()   
		d=0 
		w=7.5 
		f=382 
		cv2.putText(imagen,"objeto 2 ",(400,400),1,1,(0,0,255),1) 
		pub3 = rospy.Publisher('/bebop/land', Empty, queue_size = 1) 
		pub = rospy.Publisher('/bebop/cmd_vel', Twist, queue_size = 1) 
		amarillobajo = np.array([20, 150, 40],np.uint8)#rangos del color azul 105 105 40 , 
		amarilloalto = np.array([30, 255, 255],np.uint8)		 
	   	mascara = cv2.inRange(hsv, amarillobajo, amarilloalto)#filtro para la imagen 
	   	kernel= np.ones((5,5),np.uint8)#matriz de 6x6  de unos 
	   	mascara2=cv2.morphologyEx(mascara,cv2.MORPH_OPEN,kernel)#dilatacion de la imagen 
	   	mascara2=cv2.morphologyEx(mascara,cv2.MORPH_CLOSE,kernel)#dilatacion de la imagen 
	   	Canny =cv2.Canny(mascara2, 0, 10)#detectar los bordes 
	   	cnts,jerar = cv2.findContours(Canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
	   
		areas=[] 
		for c in cnts: 
			areas.append(cv2.contourArea(c))    
		a="0" 
		gz2=0 
		gz=0 
		p=0	 
		d3=0 
		i=0 
		ex=0 
		ez=0 
		spz=163 
		vz=0 
		vz2=0 
		ey=0 
		suerror=0 
		pix=240 
		piy=320 
		for areactual in areas: 
			if areactual>300: 
				figuraactual=cnts[i] 
				epsilon= 0.01*cv2.arcLength(figuraactual,True) 
				approx =  cv2.approxPolyDP(figuraactual,epsilon,True) 
				lados=len(approx) 
				cv2.putText(imagen,str(lados),(400,70),1,1,(0,255,0),1) 

				if 4<=lados <= 18: 
					contorno2=cv2.convexHull(figuraactual) 
					centroide=cv2.moments(contorno2) 
					x=int(centroide["m01"]/centroide["m00"]) 
					y=int(centroide["m10"]/centroide["m00"]) 
					cv2.drawContours(imagen, [contorno2], 0, (0,255,0), 2)#[c]representa todo el vector del controno 
					longitudes=cv2.minAreaRect (figuraactual) 
					box = cv.BoxPoints(longitudes) 
					box = np.int0(box) 
					cv2.drawContours(imagen, [box], 0, (0,0,255), 1) 

					cv2.putText(imagen,'*',(y,x),1,1,(0,255,0),5) 
					d1=round(longitudes[0][0],2) 
					d2=round(longitudes[0][1],2) 
					d3=round(longitudes[1][0],2) 
					d4=round(longitudes[1][1],2) 
					d5=d3*d4 
					d6=math.sqrt(areactual) 
					ex=pix-x 
					ey=piy-y 
					ez=spz-d6 
					suerror=suerror+ez 
				 
					if ey>=0: 
						gz2=0.5*red(ey/100.0) 
					else: 
						gz2=red(-ey/100.0) 
						gz2=-0.5*gz2 
				 

					 
					if -70<=ey<=70 : 
						gz2=0	 
					 

						if ex>=0: 
							gz=0.25*red(ex/100.0) 
						else: 
							gz=-0.1*red(-ex/100.0) 
					 
						if -70<=ex<=70: 
							gz=0 
							if ez>=0: 
								vz=-0.38*red2(ez*1.0) 
								 
							else: 
								vz=0 
							 
							if -40<=ez<=40: 
								gz2=0 
								vz=0 
								gz=0 
								d=0 
								a="aterrizar" 
								empty_msg = Empty() 
								pub3.publish(empty_msg) 
								arc3 = open('vid6.csv','w') 
								arc3.write('%5.3f,'%(0)) 
								arc3.close() 
							 
							 
					cv2.putText(imagen,"error en ejez = "+str(ey),(100,100),1,1,(0,0,255),1) 
					cv2.putText(imagen,"vel de giro en z = "+str(gz2),(100,140),1,1,(0,0,255),1)	 
					cv2.putText(imagen,"error en x = "+str(ex),(100,180),1,1,(0,0,255),1) 
					cv2.putText(imagen,"vel en x = "+str(gz),(100,230),1,1,(0,0,255),1)		 
					cv2.putText(imagen,"error en z = "+str(ez),(100,250),1,1,(0,0,255),1) 
					cv2.putText(imagen,"vel en z= "+str(vz+vz2),(100,280),1,1,(0,0,255),1) 
					cv2.putText(imagen,"ancho= "+str(d6),(100,320),1,1,(0,0,255),1) 
					cv2.putText(imagen,a,(100,400),1,1,(0,0,255),2)											 

					cv2.putText(imagen,'*',(y,x),1,1,(0,255,0),5) 

							 
			i=1+i 
    
		if d3>0: 
			d = (w*f)/d3*0.7 -5# determinar distancia 
			cv2.putText(imagen,'*',(320,240),1,1,(0,0,255),4)	 
					 
			if 0<d<150: 
				mensaje="distancia = "+str(round(d,2))+"cm  " +"ancho de objeto " + str(d3) 
				cv2.putText(imagen,mensaje,(20,20),1,1,(0,255,0),1) 
				escribir(t,d) 
		cv2.imshow('video',Canny) 

		twist = Twist() 
		twist.linear.x = gz; twist.linear.y = 0; twist.linear.z = vz; 
		twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = gz2 
		pub.publish(twist) 
		 
		 


	else: 
		cv2.putText(imagen,"objeto no localizado",(20,20),1,1,(0,255,0),1) 

	cv2.imshow("color azul", imagen) 
	cv2.waitKey(1) 


	 
try: 
	arc = open('alturacam.csv','w') 
	suerror=0 
	girar=0.1 
	print("ctrl+c para salir") 
	rospy.init_node('aterrizaje') 
	bridge = cv_bridge.CvBridge() 
	image_sub = rospy.Subscriber('bebop/image_raw', Image, image_callback) 
	rospy.spin() 
finally: 
	pub = rospy.Publisher('/bebop/cmd_vel', Twist, queue_size = 1) 
	print("fin del programa") 
   	twist = Twist() 
	twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0; 
	twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0 
	pub.publish(twist)


Para pilotar el dron  


#!/usr/bin/env python 

from __future__ import print_function 

import rospy 
import time 
import csv 
from geometry_msgs.msg import Twist#topico para los comandos de velocidad 
from std_msgs.msg import Empty#topico para los comandos de despegue aterrizage y paro de emegencia 




import sys, select, termios, tty#libreria para deteccion de teclas 
teclas = """ 

movientos 
        w    
   a    s    d 

x : subir 
z : bajar 
         
c : gira sobre +z 
v : gira sobre -z 

mover camara  
       k 
    j  n  i 
m : camara en poscion inicial 

1 : despegar 
2 : aterrizar 
3 : paro de motores 
4 : activar aterrizaje en plataforma con uso de odometria para posicionar la altura 
5 : activar aterrizaje en plataforma con posicionamiento manual 
7 : cancelar aterrizaje en pltaforma 

ctrl + c para salir 
""" 
movimientos = {#asignacion de movimientos al diccionario 
        'w':(1,0,0,0),#moverse en x 
        's':(-1,0,0,0),#moverse en -x 
        'a':(0,1,0,0),#moverse en y 
        'd':(0,-1,0,0),#moverse en -y 
        'z':(0,0,-1,0),#moverse en -z 
        'x':(0,0,1,0),#moverse en z 
        'c':(0,0,0,1),#girar en z 
        'v':(0,0,0,-1),#girar en z 
        
    } 


  
def getKey():# funcion para la deteccion de teclas 
    tty.setraw(sys.stdin.fileno()) 
    select.select([sys.stdin], [], [], 0) 
    key = sys.stdin.read(1) 
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings) 
    return key 



if __name__=="__main__": 
 
    settings = termios.tcgetattr(sys.stdin)       

    pub = rospy.Publisher('/bebop/cmd_vel', Twist, queue_size = 1) 
    pub2 = rospy.Publisher('/bebop/takeoff', Empty, queue_size = 1) 
    pub3 = rospy.Publisher('/bebop/land', Empty, queue_size = 1) 
    pub4 = rospy.Publisher('/bebop/reset', Empty, queue_size = 1) 
    pub5 = rospy.Publisher('/bebop/camera_control', Twist, queue_size = 1) 



    empty_msg = Empty() 
    rospy.init_node('mando2') 

    velli = 0.3#velocidad lineal 
    velan = 0.3#velocidad angular 
    x = 0 
    y = 0 
    z = 0 
    rz = 0 
 

    try: 
        

        print (teclas) 
        
        print("velocidad lineal: "+str (velli), " velocidad angular :" + str (velan)) 
        arc3 = open('vid6.csv','w') 
        arc3.write('%5.3f,'%(0)) 
        arc3.close() 
        a=0 
        b=0 
        c=0 
        while True :#ciclo infinito 
         
            
         
            key = getKey()# 
                       
            if key in movimientos.keys(): 
                x = movimientos[key][0] 
                y = movimientos[key][1] 
                z = movimientos[key][2] 
                rz = movimientos[key][3] 
           
                
            elif key == '1': 
                c=0 
                time.sleep(0.4) 
                print("despegando") 
                pub2.publish(empty_msg) 
            elif key == '2' : 
                x = 0 
                y = 0 
                z = 0 
                rz = 0 
                print("aterrizando") 
                pub3.publish(empty_msg) 
            elif key == '3' : 
                pub4.publish(empty_msg) 
                print("paro de motores") 

            elif key == 'l': 
                a=a+5 
                #print("control de camara")        	 
                twistc = Twist() 
                twistc.angular.y = b 
                twistc.angular.z = a 
                pub5.publish(twistc) 


            elif key == 'j': 
                a=a-5 
                #print("control de camara2")          
                twistc = Twist() 
                twistc.angular.y = b 
                twistc.angular.z = a 
                pub5.publish(twistc) 

            elif key == 'i': 
                b=b+5 
               # print("control de camara3")          
                twistc = Twist() 
                twistc.angular.y = b 
                twistc.angular.z = a 
                pub5.publish(twistc) 


            elif key == 'k': 
                b=b-5 
                #print("control de camara4")          
                twistc = Twist() 
                twistc.angular.y = b 
                twistc.angular.z = a 
                pub5.publish(twistc) 
            elif key == 'n': 
                print("camara abajo")          
                twistc = Twist() 
                twistc.angular.y = -50 
                twistc.angular.z = 0 
                pub5.publish(twistc) 
            elif key == 'm': 
                print("camara en centro")          
                twistc = Twist() 
                twistc.angular.y = 0 
                twistc.angular.z = 0 
                pub5.publish(twistc) 
            elif key == '4' and c==0: 
                c=1 
                print("posicionando camara")          
                twistc = Twist() 
                twistc.angular.y = -50 
                twistc.angular.z = 0 
                pub5.publish(twistc) 
                arc3 = open('vid6.csv','w') 
                arc3.write('%5.3f,'%(3)) 
                arc3.close() 
                
            elif key == '5' and c==0: 
                c=1                
                print("posicionando camara")          
                twistc = Twist() 
                twistc.angular.y = -50 
                twistc.angular.z = 0 
                pub5.publish(twistc) 
                arc3 = open('vid6.csv','w') 
                arc3.write('%5.3f,'%(2)) 
                arc3.close()    

            elif key == '7' and c==1: 
                c=0 
                print("aterrizaje cancelado")    
                print("centrando camara ")          
                twistc = Twist() 
                twistc.angular.y = 0 
                twistc.angular.z = 0 
                pub5.publish(twistc) 
                arc3 = open('vid6.csv','w') 
                arc3.write('%5.3f,'%(0)) 
                arc3.close() 


            else 
                x = 0 
                y = 0 
                z = 0 
                rz = 0 
                if (key == '\x03'):#ctrol+c salir del ciclo 
                    break#sale del ciclo infinito 

            
            

            twist = Twist() 
            twist.linear.x = x*velli; twist.linear.y = y*velli; twist.linear.z = z*velli 
            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = rz*velan 
            pub.publish(twist) 

    
    finally: 
        print("fin del programa") 
        twist = Twist() 
        twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0 
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0 
        pub.publish(twist) 

        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings) 
